apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: default
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "basic.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "basic.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- if .Values.volumes.enabled }}
          volumeMounts:
            {{- range .Values.volumes.mountPath }}
            {{- $dirmap := regexSplit ":" . -1 }}
            {{- $sub_path := slice $dirmap 0 1 | first }}
            {{- $mount := slice $dirmap  1 | last }}
            {{- if $.Values.volumes.type.pvc }}
            {{- $path := $mount }}
            - mountPath: {{ $mount | default "/var/www" }}
              name: {{ $.Release.Name }}-volume
            {{- else }}
            - mountPath: {{ $mount | default "/var/www" }}
              name: {{ $.Release.Name }}-volume
              subPath: {{ $sub_path }}
            {{- end }}
            {{- end }}
          {{- end}}
          env:
          {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            {{- range .Values.services }}
            - name: {{ .name }}
              containerPort: {{.targetPort }}
              protocol: TCP
            {{- end }}
          {{- if .Values.startupProbes.enabled }}
          {{- $livenessPort := 80 }}
          {{- range .Values.services }}
          {{- if eq .name "http" }}
          {{- $livenessPort = .targetPort }}
          {{- end }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ $livenessPort }}
            failureThreshold: 10
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /
              port: {{ $livenessPort }}
            failureThreshold: 30
            periodSeconds: 10
          {{- end }}
      {{- if .Values.volumes.enabled }}
      {{- if .Values.volumes.type.pvc }}
      {{- $ownership := regexSplit ":" .Values.volumes.ownership -1 }}
      {{- $gid := slice $ownership 0 1 | first }}
      nodeSelector:
        kubernetes.io/arch: {{ .Values.nodeSelector }}
      securityContext:
        fsGroup: {{ $gid | default 0 }}
      {{- end}}
      volumes:
        - name: {{ .Release.Name }}-volume
          {{- if .Values.volumes.type.nfs }}
          nfs:
            server: {{ .Values.volumes.type.nfs.server }}
            path: {{ .Values.volumes.type.nfs.path }}/{{ .Release.Name }}
            readOnly: false
          {{- else }}
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-pvc
          {{- end }} 
    {{- end }}